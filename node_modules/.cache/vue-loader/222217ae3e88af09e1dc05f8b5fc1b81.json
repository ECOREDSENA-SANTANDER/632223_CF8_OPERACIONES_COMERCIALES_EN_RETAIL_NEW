{"remainingRequest":"/home/runner/work/632223_CF8_OPERACIONES_COMERCIALES_EN_RETAIL_NEW/632223_CF8_OPERACIONES_COMERCIALES_EN_RETAIL_NEW/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/632223_CF8_OPERACIONES_COMERCIALES_EN_RETAIL_NEW/632223_CF8_OPERACIONES_COMERCIALES_EN_RETAIL_NEW/src/views/Tema1.vue?vue&type=template&id=38f921c0&lang=pug","dependencies":[{"path":"/home/runner/work/632223_CF8_OPERACIONES_COMERCIALES_EN_RETAIL_NEW/632223_CF8_OPERACIONES_COMERCIALES_EN_RETAIL_NEW/src/views/Tema1.vue","mtime":1741015946712},{"path":"/home/runner/work/632223_CF8_OPERACIONES_COMERCIALES_EN_RETAIL_NEW/632223_CF8_OPERACIONES_COMERCIALES_EN_RETAIL_NEW/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/632223_CF8_OPERACIONES_COMERCIALES_EN_RETAIL_NEW/632223_CF8_OPERACIONES_COMERCIALES_EN_RETAIL_NEW/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/632223_CF8_OPERACIONES_COMERCIALES_EN_RETAIL_NEW/632223_CF8_OPERACIONES_COMERCIALES_EN_RETAIL_NEW/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/632223_CF8_OPERACIONES_COMERCIALES_EN_RETAIL_NEW/632223_CF8_OPERACIONES_COMERCIALES_EN_RETAIL_NEW/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/632223_CF8_OPERACIONES_COMERCIALES_EN_RETAIL_NEW/632223_CF8_OPERACIONES_COMERCIALES_EN_RETAIL_NEW/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/632223_CF8_OPERACIONES_COMERCIALES_EN_RETAIL_NEW/632223_CF8_OPERACIONES_COMERCIALES_EN_RETAIL_NEW/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/632223_CF8_OPERACIONES_COMERCIALES_EN_RETAIL_NEW/632223_CF8_OPERACIONES_COMERCIALES_EN_RETAIL_NEW/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}